<?php
/*
Plugin Name: iTunes Lookup Widget
Description: Embeds an iTunes Widget to display any kind of store items (software, albums, artists etc).
Author: ollybach
Author URI: http://search-itunes.com
Plugin URI: http://wordpress.org/extend/plugins/itunes-lookup-widget/
Version: 0.6
License:

  Copyright 2012 ollybach (dev@1000db.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
register_uninstall_hook( __FILE__, 'ilw_uninstall' );

if ( ! class_exists( 'iTunes_Lookup_Widget' ) ) {
class iTunes_Lookup_Widget extends WP_Widget {
	private $pluginVersion;
	private $pluginName;
	private $pluginSlug;
	private $pluginSlugWp;
	private $pluginLocale;
	private $pluginTitle;
	private $pluginLocalizedVariables;
	private $pluginVariables;
	private $pluginVariablesName;
	private $pluginOptionsName;
	private $pluginOptions;
	private $pluginItunesVersion;
	private $pluginItunesLimit;
	private $pluginWidgetsActiveOnPage;
	private $pluginShortcodeHashKey;
	private $pluginNagNotice;

	private $pluginJsInFooter;
	private $pluginCacheExpiry;
	private $pluginCacheCleanUp;


    /*--------------------------------------------------*/
    /* Constructor
    /*--------------------------------------------------*/
    /**
     * The widget constructor. Specifies the classname and description, instantiates
     * the widget, loads localization files, and includes necessary scripts and
     * styles.
     */
     function __construct() {
		/**init constants***/
		$this->pluginVersion='0.6';//increment in line with stable tag in readme and version above
	 	$this->pluginName="iTunes Lookup Widget";
	 	$this->pluginSlug="itunes-lookup-widget";
	 	$this->pluginSlugWp="itunes_lookup_widget";//wp wants underscores, //set also in uninstall
	 	$this->pluginLocale="ilw-locale";
	 	$this->pluginTitle=__("on iTunes", $this->pluginLocale);
	 	$this->pluginLocalizedVariables="ilwParam";
		$this->pluginVariables=array('url'=>admin_url( 'admin-ajax.php'));
	 	$this->pluginSettingsName='settings';
	 	$this->pluginInstanceName='instances';
	 	$this->pluginRequestName='request';
	 	$this->pluginVariablesName='vars';
	 	$this->pluginOptionsName='ilw_options';//set also in uninstall
	 	$this->pluginItunesVersion='2';
	 	$this->pluginItunesLimit='200';/*max itunes will return, defaults to 50 if not set*/
		$this->pluginWidgetsActiveOnPage=0;//se we can count active widgets not include scripts when there are no active widgets (together with active shortcode check)
		$this->pluginShortcodeHashKey=array();//array that holds unique shortcode keys generated by attributes
		$this->pluginNagNotice=0;//default
	 	$this->pluginOptions=get_option($this->pluginOptionsName,0);

    	//  update classname and description
        $widget_opts = array (
            'classname' => $this->pluginSlug,
            'description' => __('Display items available on iTunes ', $this->pluginLocale)
        );

        $this->WP_Widget(false, $name=$this->pluginName, $widget_opts);
        load_plugin_textdomain($this->pluginLocale, false, dirname(plugin_basename( __FILE__ ) ) . '/lang' );

		/************************************************************************
		*
		*	[include admin only function first]
		*
		*************************************************************************/
		if(is_admin()){
			/*add admin functions*/
			add_action('admin_init', array( $this, 'ilw_require_admin_functions'));
		}

    	/**if its an ajax call, we dont need to do any of this and save us some overheads**/
    	if(!defined('DOING_AJAX') || !DOING_AJAX){
    		add_action('admin_init', array( $this, 'ilw_check_plugin_requirements'));
			add_action('admin_menu', array( $this, 'plugin_admin_add_page' ) );
    		/*no need if there are no options set yet**/
    		if($this->pluginOptions!=0){
    			add_action('admin_init', array( $this, 'ilw_admin_options_init'));
    		}
    		/**add scripts and styles*****/
    		add_action('admin_enqueue_scripts', array( $this, 'register_scripts_and_styles_admin'));
    		add_action('wp_enqueue_scripts', array( $this, 'register_scripts_and_styles'));
    		/**shortcodes*****/
    		add_action('post_updated', array(&$this, 'ilw_save_shortcodes'));
    		add_shortcode($this->pluginSlug, array($this, 'ilw_add_shortcode'));
			/*show nagscreen if required*/
			if($this->pluginOptions['ilw_nag_notice']!=0){
				add_action('admin_notices', array( $this, 'ilw_update_notice') );
				add_action('admin_head', array($this, 'ilw_dismiss_notice_js') );
			}

    	}else{
    		if(is_admin()){
    			/**dismiss admin notice via ajax call**/
    			add_action('wp_ajax_ilw_dismiss_notice', array($this, 'ilw_dismiss_notice'));
    		}
    	}

		/************************************************************************
		*
		*	[run  everywhere]
		*
		*************************************************************************/
			add_action('init', array( $this, 'ilw_require_common_output_functions'));



		/******************************************************************************
		*
		*	add settings to ajax call when getting iTunes json results,
		*	wp_ajax_[nopriv]_*[slug]* needs to be referenced in js files too
		*
		*****************************************************************************/
			add_action('wp_ajax_ilw_itunes_json', array(&$this,'ilw_itunes_json') );
			add_action('wp_ajax_nopriv_ilw_itunes_json', array(&$this,'ilw_itunes_json') );// non logged in users

	} // end constructor

/*****************************************************
*
*
* 	[check requirements and install/update/nag as neccessary]
*
*
*****************************************************/

	//PHP 5.2 (json_decode) as well as cUrl is required , so if PHP version is lower then 5.2, display an error message and deactivate the plugin
	 function ilw_check_plugin_requirements(){
		//if ( !current_user_can('activate_plugins') ){
		//	return;
		//}

		/**check if we have php>5.2 with curl installed***/
		if( version_compare( PHP_VERSION, '5.2', '<' ) || !in_array('curl', get_loaded_extensions()) ) {
				require_once ABSPATH . '/wp-admin/includes/plugin.php';
				deactivate_plugins( basename( __FILE__ ) );
				wp_die( __('iTunes Lookup Widget requires the server on which your site resides to be running PHP 5.2 or higher as well as cUrl. As of version 3.2, WordPress itself will also <a href="http://wordpress.org/news/2010/07/eol-for-php4-and-mysql4">have this requirement</a>. You should get in touch with your web hosting provider and ask them to update PHP.<br /><br /><a href="' . admin_url( 'plugins.php' ) . '">Back to Plugins</a>', $this->pluginLocale) );
		}

		/************************************************************
		*
		* first install -> set default options
		*
		************************************************************/
		if($this->pluginOptions==0){
			/**include and insert default options***/
			require_once(plugin_dir_path(__FILE__) .'inc/admin.default.options.inc.php');
			/*insert default options;*/
			update_option($this->pluginOptionsName, $defaultOptions );
		}

		/************************************************************
		*
		* plugin update
		*
		************************************************************/
		if($this->pluginOptions!=0){
			/****************************************************************************************
				@forceUpdate
				[in case we want  to force update without upgrading version, uncomment below
				 - DEVELOPMENT PURPOSES ONLY when adding/deleting default options.
			**************************************************************************************/
			//$forceUpdate=1;
			/******************************************
			*	compare versions and update if required
			*******************************************/
			if(version_compare($this->pluginOptions['version'],$this->pluginVersion, '<' ) || isset($forceUpdate)){
				/**get default options***/
				require_once(plugin_dir_path(__FILE__) .'inc/admin.default.options.inc.php');

				/**compare table options against default options and delete/add as required***/
				require_once(plugin_dir_path(__FILE__) .'inc/admin.update.options.inc.php');

				/*if current version < 0.4 enable nagscreen and update widget options*/
				if(version_compare($this->pluginOptions['version'],'0.6', '<' )){
					$update_options['ilw_nag_notice']='06';
					/*include update of widget values function**/
					require_once(plugin_dir_path(__FILE__).'inc/admin.plugin.updated.inc.php');
					ilw_update_plugin($this->pluginOptions['version'],'widget_'.$this->pluginSlugWp.'');
				}
				/***always force update of affiliate_values->default as we might have changed affiliate id's etc**/
					$defaultAffiliates=ilw_affiliate_options(array('default'));
					$update_options['affiliate_values']['default']=$defaultAffiliates['default'];
					
				/**update options**/
				update_option($this->pluginOptionsName, $update_options );
			}
		}
	}

/*****************************************************************************
*
*
* 	[Admin Nag notices (if required), show and dismiss]
*
*
*****************************************************************************/
	/* plugin update notice*/
    function ilw_update_notice() {
			$pluginUpdatedNotice='';
			$pluginUpdatedNotice.='<div id="message" class="error ilw_admin_notice" style="padding:20px;">';
			$pluginUpdatedNotice.='<b>'.$this->pluginName.' updated</b><br/><br/>';
			/*set text depending on notice number*/
			if($this->pluginOptions['ilw_nag_notice']=='06'){
				$pluginUpdatedNotice.='<b>As of 30th September 2013 Apple/iTunes have seized their affiliation with LinkShare and DGM and replaced both of these with PHG</b><br/><br/>If you had an account with either of these two and wish to continue to receive affiliate commission, you MUST apply at PHG for a new account and amend your affiliate settings of this plugin as required. <a href="http://www.apple.com/itunes/affiliates/resources/">You can sign-up from here</a></span> !';
				$pluginUpdatedNotice.='<br/>sorry about that. nothing to do with me.';
			}
				$pluginUpdatedNotice.='<br/><br/><a href="#" onclick="ilw_dismiss_notice(); return false;" class="button-primary">dismiss</a>';
			$pluginUpdatedNotice.='</div>';
		print"".$pluginUpdatedNotice."";
    }
    function ilw_dismiss_notice_js () {
        $js="";
        $js.="<script type='text/javascript' >".PHP_EOL."";
        $js.="jQuery(document).ready(function($) {".PHP_EOL."";
            $js.="ilw_dismiss_notice = function () {".PHP_EOL."";
	        	$js.="var data = {action: 'ilw_dismiss_notice'};".PHP_EOL."";
	        	// since wp2.8 ajaxurl is defined in admin header pointing to admin-ajax.php
	        	$js.="jQuery.post(ajaxurl, data, function(response) {".PHP_EOL."";
			        $js.="$('.ilw_admin_notice').hide('slow');".PHP_EOL."";
	        	$js.="});".PHP_EOL."";
	        $js.="};".PHP_EOL."";
        $js.="});".PHP_EOL."";
        $js.="</script>".PHP_EOL."";

        print"".$js;
    }
    public function ilw_dismiss_notice () {
        $update_options=$this->pluginOptions;
        $update_options['ilw_nag_notice']=0;/*set nag to 0*/
        update_option($this->pluginOptionsName, $update_options );
        die();
    }
/************************************************************************************
*
*	[Ajax Calls]
*   [add settings to ajax call and get iTunes json results]
*
*
************************************************************************************/
	public function ilw_itunes_json(){
		require(plugin_dir_path(__FILE__).'ajax/get-json.php');
		die();
	}

/*****************************************************
*
*
* 	[Shortcodes Options, Functions, Settings]
*
*
*****************************************************/

    /*******************************************************
		[save shortcodes to option table when edited/added in admin]
		[check if page has shortcode]
		[print shortcodes frontend]
	******************************************************/
	public function ilw_save_shortcodes($post_id){

		/**this post details**/
		$thisPost= get_post($post_id);
		$thisPostId=$thisPost->ID;

		/**types to check against as we only need to save shortcodes when post, page and status is publish, draft or trash**/
		$chkType=array('post','page');
		$chkStatus=array('publish','trash','draft');

		/*************************************************************************
			[get all ilw shortcodes that are used in this page update,
			but only do this when type= post or page AND status=publish or trash.
			revisions, inherit etc do not need this function to run]
		*************************************************************************/
		if(in_array($thisPost->post_type,$chkType) && in_array($thisPost->post_status,$chkStatus) ){

		 	/**defaults**/
			$defaultCountry=ilw_country_list();
			$defaultLang=ilw_language_options();
			$defaultExplicit=ilw_explicit_options();
			$defaultLabels=ilw_display_options('',true);

		 	/**ilw options**/
			//$options = get_option($this->pluginOptionsName);
			$options = $this->pluginOptions;
			/**all current shortcodes used in all posts***/
			$allCurrentShortcodes=maybe_unserialize($options['used_shortcodes']);

			/**get only the shortcodes that were used in this particular post**/
			if(isset($allCurrentShortcodes[$thisPostId])){
				$thisPageCurrentShortcodes=$allCurrentShortcodes[$thisPostId];
			}else{
				$thisPageCurrentShortcodes=array();
			}

				$thisPageNewShortcodes[$thisPostId]=array();//*initialize empty array
		 		/*************************************************************************************************
		 			[if we have just moved the page to trash, do not try to get shortcodes but use empty initialized array above
		 			to delete this pages shortcodes from option table
		 			if the post gets restored (as draft) and published/saved/updated again, this function runs again to get the relevant shortcodes]
		 		************************************************************************************************/
		 		if($thisPost->post_status!='trash'){
			 		$regex_pattern = get_shortcode_regex();
					/**get all ilw shortcodes (including nested ones)**/
					preg_match_all('/\['.$this->pluginSlug.'[^\]]*]/uis', $thisPost->post_content , $ilw_matches);
					foreach($ilw_matches[0] as $m=>$n){
						preg_match('/'.$regex_pattern.'/s', $n, $regex_match);
						$atts=shortcode_parse_atts($regex_match[3]);
						extract(shortcode_atts( $this->ilw_default_instance_settings(true), $atts ));//return default keys lowercase as shortcodes want lowercase keys no, dunno either why
			 				/**create array of all used ilw shortcodes in this page, provided they have an artist id**/
			 				if((int)$artist_id>0){
			 					$key=$this->ilw_shortcode_attr_hash($atts);
			 					/**make sure values are lowercase as shortcode_atts above changes this!!!**/
			 					$thisPageNewShortcodes[$thisPostId][$key]=array('artist_id'=>$artist_id,'max_items'=>$max_items,'country'=>$country,'language'=>$language,'explicit'=>$explicit,'media'=>$media,'exclude'=>$exclude,'sort'=>$sort,'lbl'=>$lbl,'sortKey'=>$sortkey,'sortOrder'=>$sortorder,'show_label'=>$show_label,'song'=>$song,'omitid'=>$omitid);
			 				}
					}
		 		}

			/***check if the shortcodes have changed on this page and if so , update options table***/
			$updateShortcodes=false;
			if($thisPageCurrentShortcodes!=$thisPageNewShortcodes[$thisPostId]){
				$updateShortcodes=true;
				/**if we have to update, first unset the old values of this page in the option table**/
				if(array_key_exists($thisPostId,$allCurrentShortcodes)){
					unset($allCurrentShortcodes[$thisPostId]);
				}
			}

			if($updateShortcodes){
				/**if there arent any in the option table yet, create empty array**/
				if(!$allCurrentShortcodes){$allCurrentShortcodes=array();}
				$allShortcodes=array_filter($allCurrentShortcodes+$thisPageNewShortcodes);
				/******re-save all pages shortcodes inlcuding these new ones (if any) by updating the option table***/
		 	 	$update_options=$this->pluginOptions;
        		$update_options['used_shortcodes']=$allShortcodes;
        		update_option($this->pluginOptionsName, $update_options );

			}
		}
	}
	/**check if a page has shortcodes*/
	function ilw_page_has_shortcode(){
		global $post;
		$shortcodes=0;
    	if (isset($post->post_content) && stripos( $post->post_content, '[' . $this->pluginSlug) !== FALSE ) {
        	$shortcodes=1;//found a short code
    	}
		return $shortcodes;
	}
	/********************************************
	[make unique hash key from attributes for a shortcode
	to be able to reliably identify an executed shortcode
	even if some other plugin skipped some of the shortcodes
	when - for example - only displaying a shortcode by location
	the user is in]
	[used when saving values in admin and
	displaying in frontend]
	*********************************************/
	function ilw_shortcode_attr_hash($att){
		$str=implode("",$att);
		$oHash=hash('crc32b', $str);
		$hash=$oHash;

		/**ad an identifier if we have 2 or more of the same***/
		if(isset($this->pluginShortcodeHashKey[''.$hash.'']) && count($this->pluginShortcodeHashKey[''.$hash.''])>0){
			$hash=$oHash.''.(count($this->pluginShortcodeHashKey[''.$oHash.''])-1);
		}
		/**add this hash to array to check against **/
		$this->pluginShortcodeHashKey[''.$oHash.''][]=1;
		return $hash;
	}
	/**every shortcode gets processed seperately, so this function gets executed x times depending on the number of ilw shortcodes in the page hence the count*/
	/*if js NOT in footer, the count determines if we have to initialize the js vars**/
	public function ilw_add_shortcode($atts){
		static $scCount=0;
			include(plugin_dir_path(__FILE__).'views/shortcode.php');
		$scCount++;
		return $shortcodeMarkup;
		die();//needed !!!
	}

/*****************************************************
*
*
* 	[Widget Options, Functions, Settings]
*
*
*****************************************************/
    /*******************************************************
     * Outputs the content of the widget.
     *
     * @args            The array of form elements
     * @instance
     ******************************************************/
    function widget($args, $instance) {
    	static $widgetcount=0;

		require(plugin_dir_path(__FILE__).'views/widget.php');
		/**localize variables in footer if set to footer***/
		if($this->pluginOptions['js_in_footer']){
			$options = $this->pluginOptions;
			/**instance variables**/
			/**instance query string only useful if an artistid is has been defined**/
			if($instance['artist_id']>0){
				$this->pluginVariables[''.$this->pluginInstanceName.''][''.$widget_id.'']=$this->number;
			}
		}
    	$widgetcount++;
    	$this->pluginWidgetsActiveOnPage++;

    }

    /**
     * Processes the widget's options to be saved.
     *
     * @new_instance    The previous instance of values before the update.
     * @old_instance    The new instance of values to be generated via the update.
     */
    function update($new_instance, $old_instance) {
        $instance = $old_instance;

        $instance['title'] = strip_tags( stripslashes($new_instance['title']) );
        $instance['artist_id'] = sanitize_selection( array($new_instance['artist_id']),'int',false );
        $instance['max_items'] = absint( $new_instance['max_items'] );
    	$instance['country'] = strip_tags( $new_instance['country'] );
    	$instance['language'] = strip_tags( $new_instance['language'] );
    	$instance['explicit'] = strip_tags( $new_instance['explicit'] );
    	$instance['exclude'] = empty($new_instance['exclude'] )? false : sanitize_selection($new_instance['exclude']);
    	$instance['sort'] = sanitize_selection($new_instance['sort'],'int' );
    	$instance['lbl'] = sanitize_selection($new_instance['lbl']);
        $instance['show_label'] = empty($new_instance['show_label']) ? false : true;
        $instance['sortKey'] = strip_tags( $new_instance['sortKey'] );
        $instance['sortOrder'] = strip_tags( $new_instance['sortOrder'] );
        $instance['song'] = empty($new_instance['song']) ? false : true;
        $instance['omitid'] = strip_tags( stripslashes($new_instance['omitid']) );

        return $instance;

    } // end widget

    /*****************************************************
     * Generates the administration form for the widget.
     * @instance    The array of keys and values for the widget.
     ******************************************************/
    function form($instance) {
        // Display the admin form
    	include(plugin_dir_path(__FILE__).'views/admin.php');
		/**add to localized admin vars if this is an active widget**/
		if ( is_active_widget( false, $this->id, $this->id_base, true ) ) {
			$this->pluginVariables[''.$this->pluginInstanceName.''][''.$this->id.'']=$this->number;
		}
    } // end form

	/****************************************************************
		[default instance settings...next time we'll keep keys
		lowercase to start off with -- its a shortcode thing]
	****************************************************************/
	private function ilw_default_instance_settings($changeCase=false){

		$defaultCountry=ilw_country_list();
		$defaultLang=ilw_language_options();
		$defaultExplicit=ilw_explicit_options();
		$defaultLabels=ilw_display_options('',true);

		 $defaults=array(
            'title' => ''.$this->pluginTitle.'',
            'artist_id'     => '',
        	'max_items'         => 15,
        	'country'       => ''.$defaultCountry[0]['iso'].'',
        	'language'       => ''.$defaultLang[0]['id'].'',
			'explicit'       => ''.$defaultExplicit[0]['id'].'',
			'media'       => 'all',
			'exclude'	=>false,
			'omitid'	=>'',
			'sort'		=>''.implode(",",array_keys(ilw_display_options())).'',
			'lbl'	=>''.implode(",",$defaultLabels).'',
			'sortKey'	=>'default',
			'sortOrder'	=>'asc',
			'show_label'	=>true,
			'song'	=>false
        );
        /**as shortcodes only deal with lowercase (no, dunno either) we change case when needed**/
        if($changeCase){
        	$defaults = array_change_key_case($defaults, CASE_LOWER);
        }

		return $defaults;
	}
/*****************************************************
*
*
* 	[Admin Options and Functions]
*
*
*****************************************************/
	/***	[Setup admin settings page*/
	function plugin_admin_add_page($hook) {
		add_options_page('Settings', 'iTunes Lookup Widget', 'manage_options',  basename( __FILE__ ), array( $this, 'ilw_admin_page' ) );
	}
    /***	[display the admin options page] ***/
    function ilw_admin_page() {
		// Check if user can access to the plugin
		if (!current_user_can('administrator'))
		wp_die( __('You do not have sufficient permissions to access this page.') );
		/*include the pages**/
		require(plugin_dir_path(__FILE__) .'inc/admin.page.wrapper.inc.php');
	}
	function ilw_admin_options_init(){
	/***	[include admin options]	***/
		require(plugin_dir_path(__FILE__) .'inc/admin.page.options.inc.php');
	}
	function ilw_section_headers($var) {
	/***	[include admin options]	***/
		require(plugin_dir_path(__FILE__) .'inc/admin.page.headers.inc.php');
	}
	function ilw_settings_input($field='') {
	/***	[include settings inputs]	***/
		require(plugin_dir_path(__FILE__) .'inc/admin.page.inputs.inc.php');
	}
	/***	[admin options validation]	***/
    function ilw_options_validate($input){
		/*do not use require_once here as it may be used more than once .doh!**/
		require(plugin_dir_path(__FILE__) .'inc/admin.options.validate.inc.php');
		return $options;
    }
	/***	[include admin function]	***/
	function ilw_require_admin_functions(){
		$pluginLocale=$this->pluginLocale;
		require_once(plugin_dir_path(__FILE__).'inc/admin.functions.inc.php');
		require_once(plugin_dir_path(__FILE__).'inc/admin.default.affiliates.inc.php');
		require_once(plugin_dir_path(__FILE__).'inc/admin.default.frontend.inc.php');
	}
/*********************************************************
*
*
*		[include common output function]
*
*
*********************************************************/
	function ilw_require_common_output_functions(){
		$pluginLocale=$this->pluginLocale;
		require_once(plugin_dir_path(__FILE__).'inc/common.output.functions.inc.php');
	}
/*********************************************************
*
*
*		[from frontend ajax calls]
*		[ilw_advance_page_impression_counter before any widgets/shortcodes are displayed
*
*
*********************************************************/
	private function ilw_advance_page_impression_counter(){
		// affiliate percentage disabled=>reset counter to 0 if not already 0
		//also, if disabled and counter already zero, no need to update options values
		if($this->pluginOptions['affiliate_developer_donation_percentage']>0 || $this->pluginOptions['ilw_page_impressions']>0){
			if($this->pluginOptions['affiliate_developer_donation_percentage']<=0){
				$incrImpression=0;//reset to 0
			}else{
				$incrImpression=(int)($this->pluginOptions['ilw_page_impressions']+1);//advance current counter
			}

        	$update_options=$this->pluginOptions;
        	$update_options['ilw_page_impressions']=$incrImpression;/*set nag to 0*/
        	update_option($this->pluginOptionsName, $update_options );
		}
	}

/*********************************************************
*
*
*		[register/localize scripts and styles]
*
*
*********************************************************/

	/*********************************************************
		[Register and enqueue admin scripts on pages that need it
	*********************************************************/
    public function register_scripts_and_styles_admin($hook) {
      //$options = get_option($this->pluginOptionsName);
      $options = $this->pluginOptions;
        if(is_admin() && ($hook=='settings_page_'.$this->pluginSlug || $hook=='widgets.php')) {
            /**css**/
				wp_register_style($this->pluginSlug, plugins_url( 'css/styles-admin.css', __FILE__ ), array(), $this->pluginVersion);
 				wp_enqueue_style($this->pluginSlug);
      		/**js***/
            	wp_register_script($this->pluginSlug, plugins_url( 'js/scripts-admin.js', __FILE__ ), array('jquery'), $this->pluginVersion ,true);
            	wp_enqueue_script($this->pluginSlug);

			/**localize search variables**/
			add_action('admin_footer',  array(&$this, 'localize_variables'));
        }
    }
	/*********************************************************
		[register and enqueue frontend scripts on pages that need it]
	*********************************************************/
    public function register_scripts_and_styles($hook) {
    //$options = get_option($this->pluginOptionsName);
    $options = $this->pluginOptions;
        if(!is_admin()){
        	/**only register if there's an active widget AND/OR a shortcode. localize_variables will also check if theres one actually on current page displayed**/
        	if ( is_active_widget( false, false, $this->id_base, true ) || $this->ilw_page_has_shortcode()>0) {
            	/**css**/
            	if($options['include_css']){
            		/**copy stylesheet as ilw-style.css to template directory to keep settings**/
            		if (file_exists( get_template_directory() . '/ilw-style.css')){
            			wp_register_style($this->pluginSlug, get_template_directory_uri().'/ilw-style.css', array(), $this->pluginVersion);
            		}else{
						wp_register_style($this->pluginSlug, plugins_url( 'css/styles.css', __FILE__ ), array(), $this->pluginVersion);
            		}
 					wp_enqueue_style($this->pluginSlug);
            	}
        		/**js***/
            		wp_register_script($this->pluginSlug, plugins_url( 'js/scripts.min.js', __FILE__ ), array('jquery'), $this->pluginVersion ,$this->pluginOptions['js_in_footer']);
            		wp_enqueue_script($this->pluginSlug);

				/**localize in footer if set otherwise these variables will be set under each widget element***/
				if($this->pluginOptions['js_in_footer']){
					add_action('wp_footer',  array(&$this, 'localize_variables'),$options['js_priority']);
				}
			}
        }
    }
	/*********************************************************
		[localize scripts]
	*********************************************************/
	 public function localize_variables(){
	 	$localizeVariables=1;//default->localize
	 	/*check if we are actually displaying a widget/shortcode on this (frontend) page**/
	 	if(!is_admin() && $this->ilw_page_has_shortcode()<=0 && $this->pluginWidgetsActiveOnPage<=0){
			$localizeVariables=0;
	 	}
		/*only enqueue on frontend (admin always enqueued) if there are active widgets or shortcodes on page**/
		if($localizeVariables==1){
			wp_localize_script( $this->pluginSlug, $this->pluginLocalizedVariables,  $this->pluginVariables);
		}
	 }

}} // end class
add_action('widgets_init', create_function('', 'register_widget("iTunes_Lookup_Widget");'));
?>